server {
  listen 80;
  # server_name localhost; # You can uncomment and set your domain if needed

  # Root directory for Nginx to serve files from
  root   /usr/share/nginx/html;
  # Default file to serve if a directory is requested
  index  index.html index.htm;

  # Proxy API requests to the backend server
  location /api {
    # The address of your backend service.
    # If backend runs on host machine and Docker is on Linux: http://172.17.0.1:3001 (default Docker bridge IP)
    # If backend is another Docker container on the same Docker network: http://backend_service_name:3001
    # For simplicity, assuming backend is accessible at localhost:3001 from Nginx container's perspective
    # (this usually means backend is also running on host or using host networking for backend container).
    # If backend is another container, use its service name: e.g., proxy_pass http://backend:3001;
    # For now, let's assume the backend is running on the host and accessible via a common Docker networking pattern or directly.
    # A common setup for local development when backend is on host: proxy_pass http://host.docker.internal:3001;
    # However, host.docker.internal is Docker Desktop specific.
    # If backend runs on a fixed IP or another container name, use that.
    # For this case, let's assume a backend service name 'backend-api' if they were linked in a docker-compose.
    # Since we don't have that, using localhost:3001 is a common scenario if the backend is exposed on the host's port 3001.
    # If Nginx itself is running in a container, localhost:3001 inside the Nginx container will not reach the host's localhost:3001
    # without specific Docker network configurations (e.g. --network="host" for nginx container, or using host.docker.internal).
    #
    # Given the current setup is likely `docker run -p 8080:80 ai-cv-maker` for frontend,
    # and backend is run separately on host `npm run dev` (port 3001),
    # `host.docker.internal` is the most reliable way for Docker Desktop (Windows/Mac) to reach the host.
    # For Linux hosts, if backend is on host, you might need to use the host's IP on the Docker bridge network (e.g., 172.17.0.1)
    # Or, if running backend also in Docker on same network: proxy_pass http://backend-service-name:3001;
    proxy_pass http://host.docker.internal:3001; # For Docker Desktop (Windows, Mac) to reach host machine

    # For Linux hosts, if backend is on host, you might need to use the host's IP on the Docker bridge network (e.g., 172.17.0.1)
    # Or, if running backend also in Docker on same network: proxy_pass http://backend-service-name:3001;

    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Optional: Depending on backend, you might need to handle redirects or path rewrites.
    # proxy_redirect off;
    # If your backend API routes do not include /api, you might need a rewrite:
    # rewrite ^/api(/.*)$ $1 break; # This removes /api before passing to backend
    # For now, assume backend API routes also start with /api (e.g. /api/users/me)
  }

  location / {
    # First attempt to serve request as file, then
    # as directory, then fall back to displaying a 404.
    # For SPAs, we want to fall back to /index.html for any path not found.
    try_files $uri $uri/ /index.html;
  }

  # Optional: You can add more specific configurations below, for example:
  # - Caching policies for static assets (css, js, images)
  # - Gzip compression
  # - HTTP/2 settings
  # - Security headers

  # Example for caching static assets:
  # location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|webp|svg)$ {
  #   expires 7d; # Cache these assets for 7 days
  #   add_header Cache-Control "public";
  # }

  # Example for Gzip compression (ensure Nginx was built with gzip module):
  # gzip on;
  # gzip_vary on;
  # gzip_proxied any;
  # gzip_comp_level 6;
  # gzip_buffers 16 8k;
  # gzip_http_version 1.1;
  # gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

  # Deny access to hidden files (e.g., .htaccess, .htpasswd, .DS_Store)
  location ~ /\. {
    deny all;
  }

  # Optional: Error pages
  # error_page 404 /404.html; # Make sure you have a 404.html in your /usr/share/nginx/html
  # location = /404.html {
  #   internal;
  # }
  # error_page 500 502 503 504 /50x.html; # And a 50x.html
  # location = /50x.html {
  #   internal;
  # }
}
